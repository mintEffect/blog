---
layout: post
title: "Java 100제 시험 준비"
date: 2023-12-03
last_modified_at: 2023-12-03
categories: [programming]
tags: [Java]
---
# 시험범위
## 변수와 타입  
변수 선언  
정수 타입  
문자 타입  
실수 타입  
논리 타입  
문자열 타입  
자동 타입 변환  
강제 타입 변환  
연산식에서 자동 타입 변환문자열을 기본 타입으로 변환  
변수 사용 범위  
콘솔로 변수값 출력  

## 연산자  
부호/증감 연산자  
산술 연산자  
정수 연산으로  
비교 연산자  
논리 연산자  
대입 연산자  
삼항(조건) 연산자  
연산의 방향과 우선순위  

### 삼항 연산자
```
조건문 ? 값1 : 값2
```
조건문이 참이라면 값1을, 거짓이라면 값2를 return 한다.

## 조건문과 반복문  
코드 실행 흐름 제어  
if 문  
switch 문  
for 문  
while 문  
do-while 문  
break 문  
continue 문  

### do-while 문
```
do{
    코드
} while(조건문);
```
코드 첫 실행 후 조건문이 참일 동안 코드를 계속 반복한다.  
- 항상 한 번 이상이 실행된다.  
## 참조 타입  
데이터 타입 분류  
메모리 사용 영역  
참조 타입 변수의 ==, != 연산  
null과 NullPointerException  
문자열(String) 타입  
배열(Array) 타입  
다차원 배열  
객체를 참조하는 배열  
배열 복사  
배열 항목 반복을 위한 향상된 for 문  
열거(Enum) 타입  
### 열거(Enum) 타입
한정된 값을 가지는 데이터 타입으로 상수 여러개를 저장하는데 쓰인다.  
```
public enum Week{
    MONDAY,
    TUESDAY,
    ...
    SUNDAY
}
public statuc void main(String[] args){
    Week today = Week.SUNDAY;
    System.out.println(Week.today);
}
```
```
SUNDAY
```
## 클래스  
객체 지향 프로그래밍  
객체와 클래스  
클래스 선언  
객체 생성과 클래스 변수  
클래스의 구성 멤버  
필드 선언과 사용  
생성자 선언과 호출  
메소드 선언과 호출  
인스턴스 멤버  
정적 멤버  
final 필드와 상수  
패키지  
접근 제한자  
Getter와 Setter  
싱글톤 패턴  
### 필드, 생성자, 메소드 선언
클래스의 구성요소 3가지이다.  
아래는 사칙연산을 구현한 코드이다.  

```
import java.util.Objects;

public class Method01 {
    public static void main(String[] args) {
        Method01 instance1 = new Method01(); //Method01 생성자
        //필드
        int add = instance1.addNumber(1,2);
        int sub = instance1.subNumber(1,2);
        int mul = instance1.mulNumber(1,2);
        int div = instance1.divNumber(1,2);
        int cal = instance1.calculate(3,2,"+");
        System.out.println(add);
        System.out.println(sub);
        System.out.println(mul);
        System.out.println(div);
        System.out.println(cal);
    }
    //메소드  
    public int addNumber(int num,int num2){
        return num + num2;
    }
    public int subNumber(int num,int num2){
        return num - num2;
    }
    public int mulNumber(int num,int num2){
        return num * num2;
    }
    public int divNumber(int num,int num2){
        return num / num2;
    }
    public int calculate(int num, int num2, String type){
        if(Objects.equals(type, "+")){ // type == "+"
            return num + num2;
        }
        else if(Objects.equals(type, "-")){ // type == "-"
            return num - num2;
        }
        else if(Objects.equals(type, "*")){ // type == "*"
            return num * num2;
        }
        else{ // type == "/"
            return num / num2;
        }
    }
    
}
```
### 인스턴스 멤버와 정적 멤버
인스턴스 멤버
```
public class Student {
	
    // field
    String name;
    int grade;
    
    // method
    void setName(String name) { ... }
    void setGrade(int grade) { ... }
    
}
```
정적 멤버
```
public class Phone {
	
    String company;
    
    // static field
    static int count = 0;	// 초기값을 줘도 된다.
    
	String getCompany() { ... }
    
    // static method
    static int getNumber() { ... }
    
}
```
객체별로 다른 값을 가지는 경우에는 인스턴스 멤버, 모두 같은 초기값을 가진다면 static을 이용해 정적 멤버를 사용한다.  

### final 필드와 상수
```
final 타입 필드 [= 초기값];
```
더 이상 바꾸지 않는 값에 final 필드를 쓴다.
```
static final 타입 상수 [=초기값];
```
상수 이름은 모두 대문자, 단어 혼합시 _를 이용해야 한다.
