---
layout: post
title:  "조건문과 반복문"
date:   2023-08-13
last_modified_at: 2023-08-13
categories: [programming]
tags: [Java]
---
# 제어문
## 조건문
### if
조건을 판단해 상황에 맞게 처리하기 위해 사용하는 제어문
```
if (조건문) {
    <수행할 문장1>;
    <수행할 문장2>;
    ...
} else {
    <수행할 문장A>;
    <수행할 문장B>;
    ...
}
```
else문은 if 문의 주어진 조건이 거짓일 때 실행된다.
#### 비교 연산자  

| 비교연산자 | 설명                  |  
|------------|-----------------------|  
| x > y      | x가 y보다 작다        |  
| x < y      | x가 y보다 크다        |  
| x == y     | x와 y가 같다          |  
| x  != y    | x와 y가 같지 않다     |  
| x >= y     | x가 y보다 크거나 같다 |  
| x <=  y    | x가 y보다 작거나 같다 |  

#### and, or, not  

| 연산자   | 참이 되기위한 조건           |  
|----------|------------------------------|  
| x && y   | x와 y 모두 참                |  
| x \|\| y | x와 y 둘 중 적어도 하나가 참 |  
| !x       | x가 거짓                     |  

#### else if  

```
if (조건문) {
    <수행할 문장1> 
    <수행할 문장2>
    ...
}else if (조건문) {
    <수행할 문장1>
    <수행할 문장2>
    ...
}
...
} else {
   <수행할 문장1>
   <수행할 문장2>
   ... 
}
```

### switch / case 

switch / case 문의 구조는 다음과 같다.'
```
switch(입력변수) {
    case 입력값1: ...
         break;
    case 입력값2: ...
         break;
    ...
    default: ...
         break;
}

```
switch / case 문은 입력값이 정형화되어있을 때 사용하기 좋은 조건문이다.  
```
public class Sample {
    public static void main(String[] args) {
        int month = 8;
        String monthString = "";
        switch (month) {  // 입력 변수의 자료형은 byte, short, char, int, enum, String만 가능하다.
            case 1:  monthString = "January";
                     break;
            case 2:  monthString = "February";
                     break;
            case 3:  monthString = "March";
                     break;
            case 4:  monthString = "April";
                     break;
            case 5:  monthString = "May";
                     break;
            case 6:  monthString = "June";
                     break;
            case 7:  monthString = "July";
                     break;
            case 8:  monthString = "August";
                     break;
            case 9:  monthString = "September";
                     break;
            case 10: monthString = "October";
                     break;
            case 11: monthString = "November";
                     break;
            case 12: monthString = "December";
                     break;
            default: monthString = "Invalid month";
                     break;
        }
        System.out.println(monthString);
    }
}
```
switch / case 문을 사용한 좋은 예시이다.  
입력값인 month가 1인경우 January가 출력되고, 4인경우 April이 출력된다.
 
## 반복문  
### while  
while은 다음과 같은 형식으로 쓴다.
```
while (조건문) {
    <수행할 문장1>;
    <수행할 문장2>;
    <수행할 문장3>;
    ...
}
```  
조건문이 참인동안 수행한 문장들을 계속 반복하여 실행한다.
![](https://wikidocs.net/images/page/212/04-03_while1.png)

또 while문을 이용하여 무한히 반복하는 코드를 작성할 수 있다.

```  
while (true) {    
    <수행할 문장1>;
    <수행할 문장2>;
    ...
}
```  

이 코드에서는 수행할 문장들이 무한히 반복된다.
#### break
반복문을 강제로 빠져나가야하는 경우에는 break 를 사용한다.
```  
while (true) {    
    <수행할 문장1>;
    <수행할 문장2>;
    ...
    if(<빠져나갈 조건>) break; // 강제로 반복문 빠져나감
}
```  

#### continue
반복문의 처음으로 돌아가고 싶은 경우에는 continue 를 사용한다.
```  
while (true) {    
    <수행할 문장1>;
    if(<돌아갈 조건>) continue; // 반복문의 처음으로 돌아간다.
    <수행할 문장2>;
    ...
}
```  

### for
```  
for (초기치; 조건문; 증가치) {
    <수행할 문장>;
    ...
}
```  
초기치는 for문의 실행 횟수를 관리하는 변수의 초깃값을 정해준다.  
조건문은 실행 횟수를 관리하는 변수가 어떤 값이 될 때 까지 반복을 하는지 정해준다.  
증가치는 실행 횟수를 관리하는 변수가 조건문의 값이 될때까지 어떻게 변할지 정해준다.
```
String[] numbers = {"one", "two", "three"};
for(int i=0; i<numbers.length; i++) {
    System.out.println(numbers[i]);
}
```
실행 횟수를 관리하는 변수 i는 0으로 시작해서 1씩 늘어나며 nunbers.length가 될때까지 반복문을 실행한다.  
위 코드의 실행값은 다음과 같다.  
```
one
two
three
```
####이중 for문
```
for(int i=2; i<10; i++) {
    for(int j=1; j<10; j++) {
        System.out.print(i*j+" ");
    }
    System.out.println("");  // 줄을 바꾸어 출력하는 역할을 한다.
}
```
for문 안에 for문을 쓰면 간단하게 구구단을 출력할 수 있다.    
```
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
4 8 12 16 20 24 28 32 36 
5 10 15 20 25 30 35 40 45 
6 12 18 24 30 36 42 48 54 
7 14 21 28 35 42 49 56 63 
8 16 24 32 40 48 56 64 72 
9 18 27 36 45 54 63 72 81
```
